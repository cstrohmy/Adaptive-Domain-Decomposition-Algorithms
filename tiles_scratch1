from dataclasses import dataclass
import math

# hmm add a LocalCoordinates class?
# feel like I ought to have "abstract shapes" vs "concrete shapes"
# the actual geometric instantiation is obtained basically by a Mixin
# the abstract shapes have their own "abstract coordinate system", indexing scheme, etc.


# would be much faster to get all of the neighbors at once--


# should make Interval class first, then define __mul__ for cartesian product
# bd for boundary, use Leibnitz
# for many shapes, distance function will be represented in terms of coordinates, and for rects, intervals



@dataclass(frozen=True)
class Point:
    x: float = 0.0
    y: float = 0.0


@dataclass(frozen=True)
class Tile:
    i: int = 0
    j: int = 0
    k: int = 0

    @property
    def indices(self):
        return self.i, self.j, self.k

    @property
    def length(self):
        return (1 << self.k) ** -1

    @property
    def corner(self):
        return Point(self.i * self.length, self.j * self.length)

    @property
    def center(self):
        return Point((self.i + 1/2) * self.length, (self.j + 1/2) * self.length)

    @property
    def children(self):
        i, j, k = self.i, self.j, self.k
        return [
            Tile(2 * i, 2 * j, k + 1),
            Tile(2 * i + 1, 2 * j, k + 1),
            Tile(2 * i, 2 * j + 1, k + 1),
            Tile(2 * i + 1, 2 * j + 1, k + 1)
        ]

    @property
    def parent(self):
        return None if self.k == 0 else Tile(self.i // 2, self.j // 2, self.k - 1)

    @property
    def neighbors(self):
        def valid(indices):
            ii, jj, kk = indices
            boo = (ii not in range(1 << kk)) or (jj not in range(1 << kk))
            return not boo
        i, j, k = self.i, self.j, self.k
        nbd = filter(valid, [(i + 1, j, k), (i, j + 1, k), (i - 1, j, k), (i, j - 1, k)])
        nbd = map(lambda indices: Tile(*indices), nbd)
        nbd = list(nbd)
        return nbd

    def dist(self, point: Point) -> float:
        i, j, k = self.indices
        x, y = point.x, point.y
        l = self.length
        x0, x1 = i * l, (i + 1) * l
        y0, y1 = j * l, (j + 1) * l
        if (x0 <= x <= x1) & (y0 <= y <= y1):
            return 0
        return math.hypot(min(abs(x0 - x), abs(x - x1)), min(abs(y0 - y), abs(y - y1)))



import numpy as np
import matplotlib.pyplot as plt
from collections import deque


K = 9
WIDTH, HEIGHT = 512, 512
img = np.zeros((HEIGHT, WIDTH))

x, y = np.meshgrid(np.linspace(0, 1, WIDTH), np.linspace(0, 1, HEIGHT))
y = y[::-1]


accepted_tiles = []
tile_deque = deque([Tile()])
while tile_deque:
    tile = tile_deque.popleft()
    center = tile.center
    cx, cy = center.x, center.y
    if cx ** 2 + cy ** 2 > 1:
        continue
    length = tile.length
    distance = math.hypot(max(0, 1 - cx), max(0, 1 - cy))
    if length > .25 * distance:
        tile_deque.extend(tile.children)
    else:
        accepted_tiles.append(tile)


for tile in accepted_tiles:
    center = tile.center
    cx, cy = center.x, center.y
    length = tile.length
    hl = length / 2
    tile_mask = (np.abs(x - cx) < hl) & (np.abs(y - cy) < hl)
    img[tile_mask] += .2

plt.imshow(img)
plt.show()






























